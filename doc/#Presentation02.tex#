% Created 2017-03-30 Thu 23:16
\documentclass[presentation]{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\usepackage{xeCJK}
\usepackage{minted}
\setCJKmainfont{Inziu Iosevka TC}
\input {highlight.sty}
\usetheme[block=fill]{metropolis}
\usecolortheme{metropolis}
\usefonttheme{metropolis}
\useinnertheme{metropolis}
\useoutertheme{metropolis}
\author{金琪琦}
\date{\today}
\title{JavaScript 代码混淆器}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs 25.1.1 (Org mode 8.2.10)}}
\begin{document}

\maketitle

\begin{frame}[label=sec-1]{代码混淆的意义}
\begin{block}<2->{一种声音}
\emph{“前端代码公开，没有秘密，本身代码就没有保护的意义。”}
\end{block}
\begin{block}<3->{我的观点}
\begin{itemize}
\item 前端代码天生的不安全性决定了，应该尽可能将重要的业务代码后移动。
\item 但一方面，总可能会有一些需要在前端处理，又有一定的敏感性业务；
\item 另一方面，前端的一些代码往往是攻击者猜测后端漏洞的入口。
\end{itemize}

因此对于一些重要的前端代码进行适当的混淆，能够增加攻击者破译的难度。保护前端代码的同时维护整个系统的安全。
\end{block}
\end{frame}
\begin{frame}[label=sec-2]{现状}
目前代码混淆在前端使用得并不多。
\begin{block}{原因}
这并不意味着前端代码不需要保护，或者对前端的代码混淆就没有意义。

而是因为前端的大多数代码并不涉及需要高安全的功能，代码混淆必然导致性能损失，对于轻量级的应用性能比安全更重要。
\end{block}
\end{frame}
\begin{frame}[label=sec-3]{应用场景}
\begin{block}{例子}
现在越来越多网站的验证码信息不再仅仅通过一张图片，而是从前端采集用户的操作信息返回给后台判断这一系列操作是否属于人类行为。
面对这样一个前端代码，一旦知道了它的采集策略就很容易伪造信息。因此对这样重要的前端代码进行混淆是很必要的。
\end{block}
\begin{block}{淘宝登录代码}
淘宝登录界面通过 uab.js 程序来采集用户信息，而这个程序就用来加载一个经过混淆的 JavaScript 程序。
\end{block}
\end{frame}
\begin{frame}[label=sec-4]{设计思路}
\begin{block}{合格的代码混淆器}
\begin{enumerate}
\item 人力不可识别
\item 增加自动化还原的难度
\item 增加调试的难度
\item 性能和混淆度的均衡
\end{enumerate}
\end{block}
\begin{block}{实现策略}
\begin{enumerate}
\item 代码压缩
\item 代码混淆
\item 代码防御
\end{enumerate}
\end{block}
\end{frame}
\begin{frame}[label=sec-5]{程序进度}
\begin{enumerate}
\item 代码压缩
\begin{itemize}
\item \alert{DONE} 删除注释
\item \alert{DONE} 删除空白符
\end{itemize}
\item 代码混淆
\begin{enumerate}
\item 变量名替换
\begin{itemize}
\item \alert{DONE} 全局变量替换为 window 的属性调用
\item \alert{DONE} 属性调用替换为取元素操作[]
\item \alert{DONE} 局部变量名随机化
\end{itemize}
\item 常量混淆
\begin{itemize}
\item \alert{DONE} 提取所有的字符串，通过字符数组打散
\item \alert{DONE} 常量编码转换
\end{itemize}
\item 控制流替换
\begin{itemize}
\item \color{red}{TODO} 将普通的循环语句展开
\item \color{red}{TODO} 将顺序执行的代码放置在精心设计的循环之中
\end{itemize}
\end{enumerate}
\item 代码防御
\begin{itemize}
\item \color{red}{TODO} 禁止代码格式化和变量重命名
\item \color{red}{TODO} 禁止代码调试
\item \color{red}{TODO} 域名绑定
\end{itemize}
\end{enumerate}
\end{frame}
\begin{frame}[label=sec-6]{实现简述}
\begin{minte}string title = "This is a Unicode π in the sky";
/*
Defined as $\pi=\lim_{n\to\infty}\frac{P_n}{d}$ where $P$ is the perimeter
of an $n$-sided regular polygon circumscribing a
circle of diameter $d$.
*/
const double pi = 3.1415926535
\end{minte}
\end{frame}
\begin{frame}[label=sec-7]{遇见的问题}
\end{frame}
\begin{frame}[label=sec-8]{下一步}
\end{frame}
% Emacs 25.1.1 (Org mode 8.2.10)
\end{document}